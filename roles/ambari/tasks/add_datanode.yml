---

- name: include create_user.yml
  include: create_user.yml
  when: inventory_hostname in groups['datanode'] 

#- name: include ambari-agent.yml
#  include: ambari-agent.yml
#  when: inventory_hostname in groups['datanode']

#- pause:
#    seconds: 30

#- name: register host
#  uri:
#    url: "http://{{AMBARI_SERVER}}:{{AMBARI_SERVER_PORT}}/api/v1/clusters/{{ CLUSTER_NAME }}/hosts/{{hostvars[item]['ansible_fqdn']}}"
#    force_basic_auth: yes
#    method: POST
#    password: "admin"
#    user: "admin"
#    HEADER_X-Requested-By: ambari
#    return_content: yes
#    status_code: 201,409
#  delegate_to: "{{AMBARI_SERVER}}"
#  with_items:
#    "{{groups['datanode']}}"

- name: create remote dir
  file: path="{{inventory_dir}}" state=directory
  delegate_to: "{{AMBARI_SERVER}}"
  run_once: true

- block:
    - name: create json from j2 files
      template: src="kdc_credential.json.j2" dest="{{kdc_credential}}" force=yes

    - name: push kdc_credential
      command: "curl -u admin:admin -H 'X-Requested-By:ambari' -X POST {{AARGS}} -d '@'{{kdc_credential}} {{APRTO}}://{{AMBARI_SERVER}}:{{APORT}}/api/v1/clusters/{{ CLUSTER_NAME }}/credentials/kdc.admin.credential"
  when: groups['kdcserver'] is defined
  delegate_to: "{{AMBARI_SERVER}}"
  run_once: true

#- block:
#   - name: process template and copy to ambari_server host
#     template: src="grow-template.json.j2" dest="{{grow_template}}" force=yes

   #- name: push cluster template
   #  command: "{{CURL}} -X POST {{AARGS}} -d '@'{{grow_template}} {{APRTO}}://{{AMBARI_SERVER}}:{{APORT}}/api/v1/clusters/{{ CLUSTER_NAME }}/hosts"
#  run_once: true
#  delegate_to: "{{AMBARI_SERVER}}"


#- name: update rack_info
#  command: "curl -u admin:admin -H 'X-Requested-By:ambari' -X PUT {{AARGS}} -d '{ \"Hosts\":{\"rack_info\":\"{{rack_info[item]}}\" } }' {{APRTO}}://{{AMBARI_SERVER}}:{{APORT}}/api/v1/clusters/{{ CLUSTER_NAME }}/hosts/{{item}}"
#  run_once: true
#  with_items:
#    "{{groups['datanode']}}"
#  when: rack_enforce

#- name: include restart_hdfs.yml
#  include: restart_hdfs.yml
#  when: rack_enforce
